{"version":3,"file":"favorites.js","sources":["../src/js/favorites.js"],"sourcesContent":["// // to fetch header\r\n//     fetch('partials/header.html')\r\n//             .then(response => {\r\n//                 if (!response.ok) {\r\n//                     throw new Error('Network response was not ok');\r\n//                 }\r\n//                 return response.text();\r\n//             })\r\n//                         .then(data => {\r\n//                 const tempDiv = document.createElement('div'); // to add div temporarly \r\n//                 tempDiv.innerHTML = data; // add to the temp div\r\n\r\n//                 // just select navbar\r\n//                 const navbar = tempDiv.querySelector('nav.navbar');\r\n\r\n//                 // if theres navbar add it\r\n//                 if (navbar) {\r\n//                     document.getElementById('header').appendChild(navbar); // add navbar to the heaeder\r\n//                 } else {\r\n//                     console.error('Navbar not found in header.html');\r\n//                 }\r\n//             })\r\n//             .catch(error => {\r\n//                 console.error('Fetch error:', error);\r\n//             });\r\n\r\n\r\n\r\n// to fetch(?) ids from local storage\r\n\r\nfunction getFavoriteIds() {\r\n    const favArrString = localStorage.getItem('favArr');\r\n    let favArr = [];\r\n    // to fetch favArr from local storage\r\n    try {\r\n        favArr = favArrString ? JSON.parse(favArrString) : [];\r\n    } catch (error) {\r\n\r\n        console.error('Error parsing favArr from localStorage:', error);\r\n        favArr = [];  // if favoriteIdsturns null then return an empty array\r\n    }\r\n\r\n    const messageContainer = document.getElementById('message-container');\r\n    \r\n        if (messageContainer) { \r\n            messageContainer.innerHTML = \"\"; // clean all mesages in message container\r\n        }\r\n\r\n\r\n    if (favArr.length === 0 && messageContainer) {\r\n        messageContainer.innerHTML = `\r\n        <div class=\"fav-message-container\">\r\n        <svg class=\"fav-chefs-hat\" type=\"fav-chefs-hat-svg\" width=\"68\" height=\"58\">\r\n            <use href=\"./svg/sprite.svg#icon-chef-hat\">\r\n        </svg> <br><br><br>\r\n    <p class=\"fav-message\">It appears that you haven't added any recipes to your favorites yet. To get started, you can add recipes that you like to your favorites for easier access in the future.</p>\r\n        </div>\r\n        `;\r\n}\r\nreturn favArr;\r\n            } \r\n\r\n//async function to fetch data \r\nasync function fetchById(id) { \r\n    const response = await fetch(`https://tasty-treats-backend.p.goit.global/api/recipes/${id}`);\r\n        if (!response.ok) {\r\n        throw new Error('Network response was not ok');// to control if the fetch is okay\r\n    }\r\n    const recipe = await response.json(); //turn api response JSN format\r\n    return recipe;\r\n\r\n\r\n}\r\n\r\n\r\n//to fetch all recipes that user selected as favorite\r\nasync function fetchFavorites() {\r\n    const favoriteIds = getFavoriteIds();//get ids from local storage\r\n    try {\r\n        const recipes = await Promise.all(favoriteIds.map(id => fetchById(id))); // use these ids to fetch recipes from api. Promise.all means makes all api requests in parallel AND bringd together into the results\r\n        return recipes; //return all recipes in array\r\n    } catch (error) {\r\n        console.error('Error fetching favorite recipes:', error);\r\n        return []; // Return an empty array if there is an error\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n//to display recipes \r\nasync function renderFavoriteRecipes() {\r\n    \r\n    const recipes = await fetchFavorites(); //fetch favorite recipes with fetchAllFavorites function\r\n\r\n    if (recipes.length === 0) { \r\n        // console.log('No favorite recipes found'); //eğer favori tarif yoksa mesaj göster\r\n    \r\n    } else {\r\n\r\n        // messageContainer.innerHTML += favImgDiv; // fotoğrafları message container içerisine eklemek için\r\n        const messageContainer = document.getElementById('message-container');\r\n        messageContainer.innerHTML = '';\r\n        \r\n\r\n        const favImgDiv = `\r\n        <div class=\"fav-img\"> \r\n            <img class=\"fav-img-item-small\" src=\"./img/favorites-small-plate-pic.png\" alt=\"fav-hero-prepared-small-plate-photo\">\r\n        </div>`;\r\n        recipes.forEach(recipe => {\r\n            // Tarif kartının HTML yapısını burada oluştur\r\n            const filledStars = Math.round(recipe.rating);\r\n            const emptyStars = 5 - filledStars;\r\n            const cardHTML = `\r\n      <li class=\"cards-listing\" style=\"background-image: url(${\r\n        recipe.preview\r\n      });\">\r\n\r\n      <div class=\"card-content-container\">\r\n         <div class=\"text-container\">\r\n            <h3 class=\"card-title\">${recipe.title}</h3>\r\n              <p class=\"specification-text\">${recipe.description}</p>\r\n          </div>\r\n\r\n          <div class=\"card-rating-container\">\r\n              <div class=\"rating-container\">\r\n                  <p class=\"rating-text\">${recipe.rating.toFixed(1)}</p>\r\n                  <div class=\"star-container\">\r\n                    ${`<svg class=\"card-star-svg\">\r\n                    <use href=\"./svg/sprite.svg#icon-star\"></use>\r\n                      </svg>`.repeat(filledStars)}\r\n\r\n                    ${`<svg class=\"card-star-svg\">\r\n                    <use href=\"./svg/sprite.svg#icon-emptystar\"></use>\r\n                    </svg>`.repeat(emptyStars)}\r\n                  </div>    \r\n                </div>\r\n              \r\n            <button class=\"recipe-button\" data-id=\"${\r\n              recipe._id\r\n            }\">See recipe</button>\r\n        </div>      \r\n      </li>\r\n    `;\r\n            messageContainer.innerHTML += cardHTML; // Kartı messageContainer'a ekle\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', renderFavoriteRecipes);\r\n\r\n\r\n\r\n// to fetch footer\r\n\r\n\r\n"],"names":["getFavoriteIds","favArrString","favArr","error","messageContainer","fetchById","id","response","fetchFavorites","favoriteIds","renderFavoriteRecipes","recipes","recipe","filledStars","emptyStars","cardHTML"],"mappings":"oCA8BA,SAASA,GAAiB,CACtB,MAAMC,EAAe,aAAa,QAAQ,QAAQ,EAClD,IAAIC,EAAS,CAAA,EAEb,GAAI,CACAA,EAASD,EAAe,KAAK,MAAMA,CAAY,EAAI,CAAA,CACtD,OAAQE,EAAO,CAEZ,QAAQ,MAAM,0CAA2CA,CAAK,EAC9DD,EAAS,CAAA,CACZ,CAED,MAAME,EAAmB,SAAS,eAAe,mBAAmB,EAEhE,OAAIA,IACAA,EAAiB,UAAY,IAIjCF,EAAO,SAAW,GAAKE,IACvBA,EAAiB,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAS9BF,CACM,CAGb,eAAeG,EAAUC,EAAI,CACzB,MAAMC,EAAW,MAAM,MAAM,0DAA0DD,CAAE,EAAE,EACvF,GAAI,CAACC,EAAS,GACd,MAAM,IAAI,MAAM,6BAA6B,EAGjD,OADe,MAAMA,EAAS,MAIlC,CAIA,eAAeC,GAAiB,CAC5B,MAAMC,EAAcT,IACpB,GAAI,CAEA,OADgB,MAAM,QAAQ,IAAIS,EAAY,IAAIH,GAAMD,EAAUC,CAAE,CAAC,CAAC,CAEzE,OAAQH,EAAO,CACZ,eAAQ,MAAM,mCAAoCA,CAAK,EAChD,EACV,CAEL,CAKA,eAAeO,GAAwB,CAEnC,MAAMC,EAAU,MAAMH,IAEtB,GAAIG,EAAQ,SAAW,EAGhB,CAGH,MAAMP,EAAmB,SAAS,eAAe,mBAAmB,EACpEA,EAAiB,UAAY,GAO7BO,EAAQ,QAAQC,GAAU,CAEtB,MAAMC,EAAc,KAAK,MAAMD,EAAO,MAAM,EACtCE,EAAa,EAAID,EACjBE,EAAW;AAAA,+DAErBH,EAAO,OACR;AAAA;AAAA;AAAA;AAAA,qCAI8BA,EAAO,KAAK;AAAA,8CACHA,EAAO,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2CAKrBA,EAAO,OAAO,QAAQ,CAAC,CAAC;AAAA;AAAA,sBAE7C;AAAA;AAAA,8BAEQ,OAAOC,CAAW,CAAC;AAAA;AAAA,sBAE3B;AAAA;AAAA,4BAEM,OAAOC,CAAU,CAAC;AAAA;AAAA;AAAA;AAAA,qDAKhCF,EAAO,GACR;AAAA;AAAA;AAAA,MAIDR,EAAiB,WAAaW,CAC1C,CAAS,CACJ,CACL,CAIA,SAAS,iBAAiB,mBAAoBL,CAAqB"}