{"version":3,"file":"favorites.js","sources":["../src/js/favorites.js"],"sourcesContent":["const messageContainer = document.getElementById('message-container'); // to select message container\nlet currentCategory = 'All Categories';\nlet previousSelectedButton = null;\n\n// to fetch ids from local storage\nfunction getFavoriteIds() {\n    const favArrString = localStorage.getItem('favArr');\n    let favArr = [];\n    // to fetch favArr from local storage\n    try {\n        favArr = favArrString ? JSON.parse(favArrString) : [];\n    } catch (error) {\n        console.error('Error parsing favArr from localStorage:', error);\n        favArr = [];  // if favoriteIds turns null then return an empty array\n    }\n\n    const favoriteCards = document.querySelector('.favorite-cards');\n\n    if (favoriteCards) {\n        favoriteCards.innerHTML = \"\"; // clean all messages in message container\n    }\n\n    if (favArr.length === 0) {\n        messageContainer.innerHTML = `\n        <div class=\"fav-message-container\">\n            <img src=\"./img/raccoon-sad-fav.png\" class=\"fav-raccoon\">\n            <p class=\"fav-message\">It appears that you haven't added any recipes to your favorites yet. To get started, you can add recipes that you like to your favorites for easier access in the future.</p>\n            <img src=\"./img/raccoon-sad-fav.png\" class=\"fav-chefs-hat\">\n        </div>\n        `;\n    }\n    return favArr;\n}\n\n// async function to fetch data \nasync function fetchById(id) {\n    try {\n        const response = await fetch(`https://tasty-treats-backend.p.goit.global/api/recipes/${id}`);\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        const recipe = await response.json();\n        localStorage.setItem(`recipe_${id}`, JSON.stringify(recipe)); // Store the recipe in local storage\n        return recipe;\n    } catch (error) {\n        console.error('Error fetching recipe by ID:', error);\n        return null;\n    }\n}\n\n// to fetch all recipes that user selected as favorite\nasync function fetchFavorites() {\n    const favoriteIds = getFavoriteIds(); // get ids from local storage\n    try {\n        const recipes = await Promise.all(favoriteIds.map(id => fetchById(id))); // use these ids to fetch recipes from api. Promise.all means makes all api requests in parallel AND brings together into the results\n        return recipes.filter(recipe => recipe !== null); // return all recipes in array, filter out null values\n    } catch (error) {\n        console.error('Error fetching favorite recipes:', error);\n        return []; // Return an empty array if there is an error\n    }\n}\n\n// to display recipes \nasync function renderFavoriteRecipes() {\n    const recipes = await fetchFavorites();\n\n    if (recipes.length === 0) {\n        // Display a message if no favorite recipes are found\n    } else {\n        // Extract categories from recipes and store in local storage\n        const categories = [...new Set(recipes.map(recipe => recipe.category))];\n        localStorage.setItem('favArrCategory', JSON.stringify(categories));\n\n        renderCategoryNames();\n        renderRecipes(recipes);\n    }\n}\n\nfunction favoritesHeartBtn() {\n    const likeButtons = document.querySelectorAll('.heard-button');\n    likeButtons.forEach(button => {\n        button.addEventListener('click', function () {\n            const recipeId = button.dataset.id;\n            const recipeCategory = button.dataset.category;\n            const favArrString = localStorage.getItem('favArr');\n            let favArr = favArrString ? JSON.parse(favArrString) : [];\n\n            if (favArr.includes(recipeId)) {\n                favArr.splice(favArr.indexOf(recipeId), 1);\n                localStorage.setItem('favArr', JSON.stringify(favArr));\n            }\n\n            // Check if there are any remaining recipes of the same category\n            const remainingRecipes = favArr.filter(id => {\n                const recipe = JSON.parse(localStorage.getItem(`recipe_${id}`));\n                return recipe && recipe.category === recipeCategory;\n            });\n\n            if (remainingRecipes.length === 0) {\n                const favArrCategoryString = localStorage.getItem('favArrCategory');\n                let favArrCategory = favArrCategoryString ? JSON.parse(favArrCategoryString) : [];\n\n                if (favArrCategory.includes(recipeCategory)) {\n                    favArrCategory.splice(favArrCategory.indexOf(recipeCategory), 1);\n                    localStorage.setItem('favArrCategory', JSON.stringify(favArrCategory));\n                }\n            }\n\n            renderCategoryNames();\n            if (currentCategory === 'All Categories') {\n                renderFavoriteRecipes();\n            } else {\n                filterRecipesByCategory(currentCategory);\n            }\n        });\n    });\n}\n\nfunction addHeartButtonListeners() {\n    const likeButtons = document.querySelectorAll('.heard-button');\n    let favCategoryArr = [];\n    likeButtons.forEach(button => {\n        if (!favCategoryArr.includes(button.dataset.category)) {\n            favCategoryArr.push(button.dataset.category);\n        }\n    });\n    favCategoryArr.sort();\n}\n\nfunction renderCategoryNames() {\n    const favCategoriesList = document.querySelector('.fav-categories-list');\n    const favArrCategoryString = localStorage.getItem('favArrCategory');\n    let favArrCategory = favArrCategoryString ? JSON.parse(favArrCategoryString) : [];\n    favCategoriesList.innerHTML = '';\n\n    const allCategoriesLi = document.createElement('li');\n    const allCategoriesButton = document.createElement('button');\n    allCategoriesButton.textContent = 'All Categories';\n    allCategoriesButton.classList.add('category-button');\n    allCategoriesButton.addEventListener('click', () => {\n        currentCategory = 'All Categories';\n        if (previousSelectedButton) {\n            previousSelectedButton.style.backgroundColor = '';\n            previousSelectedButton.style.color = '';\n            previousSelectedButton.style.border = '';\n        }\n        allCategoriesButton.style.backgroundColor = 'var(--primary-color)';\n        allCategoriesButton.style.color = '#fff';\n        allCategoriesButton.style.border = '1px solid var(--primary-color)';\n        previousSelectedButton = allCategoriesButton;\n        renderFavoriteRecipes();\n    });\n    allCategoriesLi.appendChild(allCategoriesButton);\n    favCategoriesList.appendChild(allCategoriesLi);\n\n    favArrCategory.forEach(category => {\n        const li = document.createElement('li');\n        const button = document.createElement('button');\n        button.textContent = category;\n        button.classList.add('category-button');\n        button.addEventListener('click', () => {\n            currentCategory = category;\n            if (previousSelectedButton) {\n                previousSelectedButton.style.backgroundColor = '';\n                previousSelectedButton.style.color = '';\n                previousSelectedButton.style.border = '';\n            }\n            button.style.backgroundColor = 'var(--primary-color)';\n            button.style.color = '#fff';\n            button.style.border = '1px solid var(--primary-color)';\n            previousSelectedButton = button;\n            filterRecipesByCategory(category);\n        });\n        li.appendChild(button);\n        favCategoriesList.appendChild(li);\n    });\n}\n\nfunction filterRecipesByCategory(category) {\n    fetchFavorites().then(recipes => {\n        const filteredRecipes = recipes.filter(recipe => recipe.category === category);\n        renderRecipes(filteredRecipes);\n    });\n}\n\nfunction renderRecipes(recipes) {\n    const favoriteCards = document.querySelector('.favorite-cards');\n    favoriteCards.innerHTML = '';\n\n    recipes.forEach(recipe => {\n        const filledStars = Math.round(recipe.rating);\n        const emptyStars = 5 - filledStars;\n        const cardHTML = `\n        <li class=\"cards-listing\" style=\"background-image: url(${recipe.preview});\">\n            <button class=\"heard-button\" data-category=\"${recipe.category}\" data-id=\"${recipe._id}\" aria-label=\"like-btn\">\n                <svg class=\"svg-heard add-to-fav\" data-id=\"${recipe._id}\" width=\"22px\" height=\"22px\">\n                    <use href=\"./svg/sprite.svg#icon-heart-filled\"></use>\n                </svg>\n            </button>\n            <div class=\"card-content-container\">\n                <div class=\"text-container\">\n                    <h3 class=\"card-title\">${recipe.title}</h3>\n                    <p class=\"specification-text\">${recipe.description}</p>\n                </div>\n                <div class=\"card-rating-container\">\n                    <div class=\"rating-container\">\n                        <p class=\"rating-text\">${recipe.rating.toFixed(1)}</p>\n                        <div class=\"star-container\">\n                            ${`<svg class=\"card-star-svg\">\n                            <use href=\"./svg/sprite.svg#icon-star\"></use>\n                            </svg>`.repeat(filledStars)}\n                            ${`<svg class=\"card-star-svg\">\n                            <use href=\"./svg/sprite.svg#icon-emptystar\"></use>\n                            </svg>`.repeat(emptyStars)}\n                        </div>    \n                    </div>\n                    <button class=\"recipe-button\" data-id=\"${recipe._id}\">See recipe</button>\n                </div>      \n            </div>\n        </li>\n        `;\n        favoriteCards.innerHTML += cardHTML;\n    });\n\n    favoritesHeartBtn();\n    addHeartButtonListeners();\n}\n\ndocument.addEventListener('DOMContentLoaded', renderFavoriteRecipes);"],"names":["messageContainer","currentCategory","previousSelectedButton","getFavoriteIds","favArrString","favArr","error","favoriteCards","fetchById","id","response","recipe","fetchFavorites","favoriteIds","renderFavoriteRecipes","recipes","categories","renderCategoryNames","renderRecipes","favoritesHeartBtn","button","recipeId","recipeCategory","favArrCategoryString","favArrCategory","filterRecipesByCategory","addHeartButtonListeners","likeButtons","favCategoryArr","favCategoriesList","allCategoriesLi","allCategoriesButton","category","li","filteredRecipes","filledStars","emptyStars","cardHTML"],"mappings":"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"}